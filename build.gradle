import org.ajoberstar.gradle.git.tasks.*

apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'cargo'
apply plugin: 'maven'
apply plugin: 'grails'


//Initialization
sourceCompatibility = 1.6
def artifactId = project.name
def artifactDownloadPath = "target/" + artifactId + ".war"
def artifactUploadPath = file('target/' +artifactId + '-' + project.version + '.war')
def userName = System.getProperty("user.name")
def userPropsFile = project.file(userName + ".properties")
def gradlePropsFile = project.file("gradle.properties")
def grailsPropsFile = project.file("application.properties")
def branchName = ""

//If user properties don't exist create it based on template.
if(!userPropsFile.exists())
{
	def templateFile = file("userTemplate.properties")
	ant.copy(file:templateFile.getAbsolutePath(), toFile: userPropsFile.getAbsolutePath() )
}
def userProperties = new Properties()
def userFileReader = new FileReader(userPropsFile)
userProperties.load(userFileReader)
userFileReader.close()

//Load user properties
for(currentUserProperty in userProperties.stringPropertyNames())
{
	project.ext.set(currentUserProperty, userProperties.getProperty(currentUserProperty))
}

//Configurations
buildscript {
	repositories {
		mavenCentral()
		maven{ url "http://repo.grails.org/grails/core/" }
		maven { url "https://oss.sonatype.org/content/groups/public"}
	}

	dependencies {
		classpath "org.gradle.api.plugins:gradle-cargo-plugin:0.6.1",
					"org.grails:grails-gradle-plugin:2.0.0-SNAPSHOT",
					"org.grails:grails-bootstrap:2.0.0",
					"org.ajoberstar:gradle-git:0.6.3"
	}
}

cargo {
	containerId = 'tomcat7x'
	port = Integer.parseInt("$deployPort")

	deployable {
		context = artifactId
		file = project.file(artifactDownloadPath)
	}
	
	remote {
		hostname = "$deployHostname"
		username = "$deployUserName"
		password = "$deployPassword"
	}
	
}

repositories {
	mavenRepo url: "$repositoryContextUrl/libs-releases";
	mavenCentral()
	maven{url "http://repo.grails.org/grails/core/"}
}

grails{
	grailsVersion="2.2.2"
}

dependencies {
	def cargoVersion = '1.3.3'
	cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion",
		  "org.codehaus.cargo:cargo-ant:$cargoVersion"
}

artifacts {
	archives artifactUploadPath
}

uploadArchives {
	repositories {
		mavenDeployer {
			pom.artifactId = artifactId
			repository(url: "$repositoryContextUrl/libs-release-local" ){
				authentication(userName: "$repositoryUser", password: "$repositoryPassword")
			}
			
		}
	}
}

war{
	enabled = false
	archiveName = artifactId + ".war"
	destinationDir = file("target")
}

//Disable these tasks for Grails
classes{
	enabled = false
}

processResources{
	enabled = false
}

compileJava{
	enabled = false
}


//Custom Tasks
task cleanTarget(type: Delete) {
	delete fileTree(dir: "target")
}

task downloadWar << {
	
	def groupPath = project.group.replace(".", "/")
	def defaultVersion = project.version + ".$branchName"
	def versionPath
	def versionMessage = "Enter Version: [$defaultVersion]"
	if(System.console())
	{
		versionPath = System.console().readLine(versionMessage) ?: defaultVersion
	}
	else
	{
		println versionMessage
		versionPath = System.in.newReader().readLine() ?: defaultVersion
	}
	
	def artifactNamePath = artifactId + "-" + versionPath + ".war"
	
	def downloadUrl = "$repositoryContextUrl/libs-release-local/$groupPath/$artifactId/$versionPath/$artifactNamePath"
	
	def targetDir = new File('target')
	
	if(!targetDir.isDirectory())
	{
		targetDir.mkdirs()
	}
	
	ant.get(src: downloadUrl, dest: artifactDownloadPath)
	
}

task updateUploadedPom << {
	def pomVersion = project.version
	if(!project.getGradle().getTaskGraph().hasTask(":release"))
		pomVersion += ".$branchName"
	uploadArchives.repositories.mavenDeployer.pom.version = pomVersion
}

task updateVersionNumber << {
	def oldVersion = "${project.version}"
	
	def versionPath
	//Increment Version Number
	def oldVersionArray = oldVersion.split("\\.")
	def majorVersion = oldVersionArray[0]
	def minorVersion = oldVersionArray[1]
	def patchVersion = Integer.parseInt(oldVersionArray[2]) + 1
	def defaultVersion =  "$majorVersion.$minorVersion.$patchVersion"
	
	def versionMessage = "Enter Version: [$defaultVersion]"
	if(System.console())
	{
		versionPath = System.console().readLine(versionMessage) ?: defaultVersion
	}
	else
	{
		println versionMessage
		versionPath = System.in.newReader().readLine() ?: defaultVersion
	}
	
	
	try {
		project.ant.replace(file: gradlePropsFile, token: "version=${oldVersion}", value: "version=${versionPath}", failOnNoReplacements: true)
		project.ant.replace(file: grailsPropsFile, token: "app.version=${oldVersion}", value: "app.version=${versionPath}", failOnNoReplacements: true)
	} catch (org.apache.tools.ant.BuildException be) {
		throw new GradleException("Unable to update version property.")
	}
	
}

task getBranchName(type: GitBranchList) << {
	branchName = getWorkingBranch().name
	print branchName
}

task tag(type: GitTag) {
	tagName = version
	message = "Release of ${version}"
}

task pushToRemote(type: GitPush){
	pushAll = true
}

task addVersionUpdate(type: GitAdd){
	includes = ['application.properties', 'gradle.properties']
}

task commitVersionUpdate(type: GitCommit) {
	message = "Version Number ${version}"
}

task qaRelease {
	dependsOn getBranchName, updateUploadedPom, uploadArchives, updateVersionNumber, addVersionUpdate, commitVersionUpdate, pushToRemote
}

task release {
	dependsOn tag, updateUploadedPom, uploadArchives, updateVersionNumber, addVersionUpdate, commitVersionUpdate, pushToRemote
}

//Task Dependencies
updateUploadedPom.mustRunAfter getBranchName
updateUploadedPom.mustRunAfter tag
uploadArchives.mustRunAfter updateUploadedPom
updateVersionNumber.mustRunAfter uploadArchives
addVersionUpdate.mustRunAfter updateVersionNumber
commitVersionUpdate.mustRunAfter addVersionUpdate
pushToRemote.mustRunAfter commitVersionUpdate